#!/usr/bin/env node
"use strict";function around(o,e,n){var r=o[e];o[e]=function(){for(var o=new Array(arguments.length),e=0;e<o.length;e++)o[e]=arguments[e];return n.call(this,r,o)}}function before(o,e,n){var r=o[e];o[e]=function(){n.call(this),r.apply(this,arguments)}}function exit(o){function e(){n--||_exit(o)}var n=0,r=[process.stdout,process.stderr];exit.exited=!0,r.forEach(function(o){n+=1,o.write("",e)}),e()}var commander=require("commander"),version=require("./../package.json").version,colors=require("colors"),source=require("./print"),_exit=process.exit;if(process.exit=exit,around(commander,"optionMissingArgument",function(o,e){return commander.outputHelp(),o.apply(this,e),{args:[],unknown:[]}}),before(commander,"outputHelp",function(){this._helpShown=!0}),before(commander,"unknownOption",function(){this._allowUnknownOption=this._helpShown,this._helpShown||commander.outputHelp()}),commander.version(version,"    --version").usage("[options] [text]").option("-b  --banner","print banner in ASCII style").option("-f  --font [value]","font used to print text ["+source.options.availableFonts.join("|")+"]").option("-c  --color [value]","color of the printed text ["+source.options.availableColors.join("|")+"]").option("    --bg-color [value]","background color of the printed text ["+source.options.availableBgColors.join("|")+"]"),commander.on("--help",function(){console.log(),console.log(colors.green("  Examples:")),console.log(),console.log(colors.green("    $ "+commander.name()+' --color red "print banner"')),console.log(colors.green("    $ "+commander.name()+" --help")),console.log()}),commander.parse(process.argv),!exit.exited){try{var inputData=commander.args.shift()||"";inputData.trim(),inputData?source.PRINT({text:inputData,isBanner:commander.banner,font:commander.font,color:commander.color,bgColor:commander.bgColor}):commander.outputHelp()}catch(o){console.error("[ERROR] -- something went wrong -- ",o)}exit.exited=!1,_exit(0)}